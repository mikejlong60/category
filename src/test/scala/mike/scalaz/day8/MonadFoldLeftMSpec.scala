package mike.scalaz.day8

import org.scalacheck.Prop.forAll
import org.scalacheck.Properties

import scala.language.higherKinds
import scalaz.Scalaz._
import org.scalacheck.Prop.{forAll, BooleanOperators}

class MonadFoldLeftMSpec extends Properties("FoldLeftM") {

  property("FoldLeft over a monadic value and filter the value generated by scalacheck before it gets into the body of the test") = forAll { (i1: Int, i2: Int, i3: Int) => (i1 > 9) ==> {
    def binSmalls(acc: Int, x: Int): Option[Int] = {
      (acc + x).some
    }

    val ints = List(i1, i2, i3)
    val a = (ints).foldLeftM(0) {binSmalls}

    val e = (List(i1, i2, i3).sum).some
    a == e
  }
  }


  property("FoldLeft more filtering") = forAll { n: Int => (n >= 1000000000) ==> {
    n >= 1
  }}

}
